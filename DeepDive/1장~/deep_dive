1장~3장은 소개 및 초기 설정 부분이라 생략

4장 
변수란?
하나의 값을 저장하기 위해 확보한 메모리 공간자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름
즉, 값의 위치를 가르키는 상징적인 이름 또는 식별자 
값의 할당 , 값의 재할당 (상수/변수)

5장
표현식과 문
리터럴(이해할 수 있는 문자, 약속된 기호를 사용해 값을 생성하는 표기법)
리터럴 : 위처럼 기호 문자 표기의 방법
값 : 표현식이 평가된 결과
표현식 : 값으로 평가되는 문 / 표현식이 평가되면 새로운 값을 생성 

6장
데이터타입
원시타입/ 객체타입
원시: 문자,숫자,불리언,undefined,null,심벌
객체:함수,배열,객체
타입추론(변수는 선언이 아닌 할당할때 타입이결정)
동적타이핑(재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다)
type of : 연산자뒤에 나오는 피연산자의 데이터 타입을 문자열로 반환
(const foo = true type of(foo) // boolean)

7장
연산자
산술, 할당, 비교, 논리, 타입, 지수
산술(이항:기본적인거 단항:++ --) => 암묵적타입변환과 타입강제변환이 있다
할당(= += -=)
비교(== === !==)
논리(|| && !) 
삼항 (? t:f)
type of(피연산자의 데이터 타입을 문자열로 반환)

8장 (12/30 읽기시작)
제어문
조건문 / 반복문
조건문: if...else(t/f) / swhich (case=상황별로나눌수있다)
반복문: for/ while / do...while 
*for (let i=0; i<n; i++){
    조건식이 참일경우 반복 실행될 문 
}

9장 타입변환과 단축평가
명시적타입변환 : 개발자가 의도적으로 값의 타입을 변환 (.toString)
암묵적타입변환 : 개발자의 의도와는 상관없이 자바스크립트 엔진의 의해 값의 타입을 변환('10' + 2 ='102')
 if() 사용하면 T/F 로 나온다 

 10장 객체 리터럴 (1/2)
객체리터럴: 객체를 생성하기 위한 표기법
프로퍼티 : 프로퍼티 키와 프로퍼티 값으로 구성 됨
프로퍼티 값이 함수 일 경우 : 메서드 라고 부름
프로퍼티 접근법 : . 또는 []
프로퍼티는 갱신(수정), 생성(추가), 삭제가 가능

11장 원시 값과 객체의 비교 
원시값: 변경 불가능한 값
유사배열객체: 마치 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length(길이) 프로퍼티를 갖는 객체
값의 전달: 값에 의한 전달은 되어도 메모리의 주소값이 변하는 건 아니다 
객체 : 변경 가능한 값
깊은복사, 얕은복사

12장 함수란? => 1/4일 부터
인풋과 아웃풋
자바스크립트의 함수는 객체타입이다 

자바스크립트엔진은 생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 
생성하고 거기에 객체를 할당한다 (function foo() // console.log(foo) ,foo() // foo => 이값이 나옴) 

- 함수 선언문 : function add(x,y)
- 함수 표현식 : const add  = function(x,y)
- 함수 표현식은 함수호출이 함수표현식보다 먼저 쓰이게 된다면 값을 호출할 수 없다(정의한 생성시점이 다르기에)
  반대로
  함수 선언문은 함수호출이 함수선언문보다 먼저 쓰이게 되어도 값을 호출할 수 있다(함수 호이스팅이라고 한다) 
- function 생성자함수 : function 생성자 함수로 함수를 생성하는 방식은 일반적이지도 않으며 바람직하지 않다
const add = new Function('x,y','return x+y')
- 화살표 함수 : 항상 익명함수.
 const add = (x,y) => x+y
- argumenst : 모든 인수는 암묵적으로 여기에 보관됨 //출력 : argumenst(인수 갯수)
- 매개변수 : 매개변수는 적을 수록 좋다 많을 수록 그만큼 함수가 여러가지 일을 한다는 의미, 최대 3개 적당
- 반환값(return) : 실행결과를 함수 외부로 반환, 반환문은 실행을 중지하고 함수 몸체를 빠져나간다 따라서
  리턴값 이외의 다른문이 있어도 무시된다
- 즉시실행함수(function (){}()) : 단 한번만 호출되며 다시 호출이 없다 ,익명함수를 사용하는 것이 일반적
- 재귀함수 : 자기 자신을 호출하는 함수 => factorial (재귀함수의 함수명) , 탈출 조건을 반드시 만들어야 한다
- 순수함수 : 어떤 외부 상태에도 의존하지 않으며 외부상태를 번경하지 않는 함수, 인수 불변성
- 비순수 함수 : 외부상태에 의존하거나 외부상태를 변경하는 함수, 외부상태에 따라 반환값이 달라짐

13장 스코프란!
유효범위(전역, 지역) 즉 ,식별자(변수명, 함수명 등등) 가 유효한 범위
지역 : 함수 몸체 내부
전역 : 어디든지
스코프 체인 : 모든스코프는 하나의 계층적 구조이며, 최상위는 스포프는 전역스코프,
          이처럼 계층적으로 연결된 것을 스코프 체인이라고 함
함수레벨스코프 : 전역변수가 있고 변수 내 몸체에서 새로운 변수를 선언해 중복선언이 되면 , 값이 재할당됨

14장 전역변수의 문제점 (1/5)
전역 변수 : 생명 주기가가 길다. 즉, 메모리 리소스도 오랜 기간 소비, 검색속도 또한 느리다 
모든 코드를 즉시실행함수로 감싸면모든 변수는 지역변수가 됨

15장 let,const 키워드와 블록 레벨 스코프
둘다 블록 레벨 스코프를 가진다 (지역변수처럼 취급?)
let : 변수 ,키워드 이름 중복 선언 금지
const : 상수, 반드시 선언과 동시에 초기화해야 한다. 재할당 금지!

16장 프로퍼티 어트리뷰트
프로퍼티 상태란? 
프로퍼티의 값, 값의 갱신 여부 ,열거가능여부 , 재정의 가능여부 를 말한다
예)
const person ={
  name:"lee"
}
console.log(Object.getOwnPropertyDescriptor)
// {value:"lee", writable:true, enumerable:true, configurable:true}
(Object.getOwnPropertyDescriptor)이 메서드는 프로퍼티 어트리뷰트 정보를 제공하는
프로퍼티 디스크립터객체를 반환
접근자 프로퍼티 : __proto__ (getter, setter)
데이터 프로퍼티 : {value:"lee", writable:true, enumerable:true, configurable:true}
             디스크립터 객체의 프로퍼티를 누락하면, undefined,false가 기본값
데이터프로퍼티는 확장이 금지된 객체는 프로퍼티 추가가 금지!
Object.isExtensible : 확장여부를 확인 할 수 있다
Object.PreventExtensible : 확장이 금지된다
delete : 추가는 안되자만 삭제는 가능
Object.defineProperty : 프로퍼티 정의에 의한 프로퍼티 추가도 금지
Object.seal : 객체를 밀봉한다, 밀봉된 객체는 읽기와 쓰기만 가능여부 // 확인방법 : Object.isSeal(변수명)
Object.freeze : 객체를 동결한다, 동결된 객체는 읽기만 가능 // 확인방법 : Object.isFrozon(변수명)

17장 생성자 함수에 의한 객체 생성
장점: 객채 생성 방식은 직관적이고 간편, 구조가 동일한 객체 여러개를 간편하게 생성
단점 : 객체를 여러개 생성해야하는 경우 매번 같은 프로퍼티 기술해야하기에 비효율!
Object 생성자 함수 : new Object 호출하면 빈 객체를 생성하여 반환
Object 외에도 String, Number, Boolean Array ... 
[new] : new 연산자와 함께 호출하면 생성자 함수로 동작 없다면??? 일반함수로 동작
어려운데?

18장 일급객체
-함수는 변수,객체(배열도포함)에 저장할 수 있다
-함수의 매개변수에 전달할 수 있다
-함수의 반환값으로 사용할 수 있다
장점 : 일반 객체와 같이 함수의 매개변수에 전달할 수 있으며 함수의 반환값으로 사용할 수 있다

argumenst프로퍼티(모든 인수는 여기 전달 개 수로 나옴)
함수 호출시 전달된 인수들의 정보를 담고 있는 순회가능한 "유사배열 객체"이며 함수 내부에서 지역변수 처럼 가능 즉, 외부 불가능
개 수를 보여주는데 개수가 매개변수보다 적으면 NaN 일치하면 일지할 개 수 초과하면 무시하고 포함된 개수만 반환
에러가 따로 발생하지 않는다 
[유사배열 객체]: length 프로퍼티를 가진 객체로 for문으로 순회할 수 있는 객체

19장 프로토타입
객체지향 프로그래밍 :객체의 집합으로 프로그램을 표현하려는 프로그래밍 패러다임이다
객체 : 속성을 통해 여러 개의 값을 하나의 다뉘로 구성한 복합적인 자료구조
즉, 객체지향 프로그래밍은 '상태를 나타내는 데이터(프로퍼티)'와 상태 데이터를 조작할 수 있는 '동작(메서드)' 이며
'상태 데이터와 동작을 하나의 논리적인 단위로 묶은 복합적인 자료구조'

프로토타입은 객체 간에 코드 및 속성을 공유하는 방법을 제공한다. 
어떤 객체의 프로토타입을 다른 객체로 지정하면, 후자는 전자의 속성과 메서드를 상속받게 된다.
이를 통해 코드의 재사용성이 증가하고 객체 간에 유사한 동작을 공유할 수 있다.

모든 객체는 프로토타입을 가지고 있고,모든 프로토타입은 생성자 함수와 연결되어있다
__proto__접근자 프로퍼티를 통해 내부슬롯에 간접적으로 접근할 수 있다.
- 프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍으로 존재한다
- 프로토타입은 생성자 함수가 생성되는 시점에 더불어 생성된다.

너무 어려워,,,,

프로토타입체인 : 객체의 프로토타입은 또 다른 객체이며, prototype이라는 특별한 속성을 가지고 있다. 
             이 속성은 해당 객체의 프로토타입을 가리키며, 이를 통해 상속 관계를 구축한다.
             자바스크립트는 객체의 접근할때 해당 객체에 접근하려는 프로퍼티가 없다면 [[prototype]] 내부슬롯의
             참조에 따라 자신의 부모역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색하는 것
섀도잉 : 상속관계에 의해 플퍼티가 가려지는 현상
오버라이딩 : 상위 클래스가 가지고 있는 메서드를 하위 클래스가 재정의하여 사용하는 방식

프로토타입은 생성자함수 또는 인스턴스에 의해 교체할 수 있다

instanceof : 이 연산자는 객체가 특정 클래스 또는 생성자 함수의 인스턴스인지를 확인하는 데 사용한다.
사용법 : [bject instanceof constructor]
여기서 object는 검사하려는 객체이고, constructor는 특정 클래스 또는 생성자 함수이다. 
만약 object가 constructor의 인스턴스이면 true를 반환하고, 그렇지 않으면 false를 반환

Object.create : 이 메서드는 JavaScript에서 사용되는 객체 생성 방법 중 하나이며,(정적메서드이다)
                새로운 객체를 생성하고 지정된 프로토타입 객체를 사용하여 직접 상속하는 데 사용한다.
                객체 간의 상속을 명시적으로 조작하거나, 프로토타입 체인을 조작하여 필요한 상속 구조를 만들 수 있다.
사용법 : [Object.create(proto[, propertiesObject])]
proto: 새로 생성되는 객체의 프로토타입이 될 객체이다.
propertiesObject (선택 사항): 속성 디스크립터를 포함하는 객체로, 새로운 객체에 추가할 속성을 정의한다.

in : 이 연산자는 객체 내에 특정프로퍼티가 존재하는지 여부를 확인한다
사용법 : [propertyName in object]
propertyName: 확인하려는 속성의 이름입니다.
object: 확인 대상이 되는 객체입니다.

for...in 문 : 객체의 속성을 열거하는 데 사용
사용법 : [for (variable in object) {
  // object의 속성에 대한 처리
}]
variable: 각 반복에서 현재 속성의 키가 할당될 변수입니다.
object: 열거할 객체입니다.

아 너무 어려워 이해가 안돼...

20 장 strict mode
엄격모드 : 자바스크립트 언어의 문법을 좀 더 엄격히 적요아여 오류를 발생시킬 가능성이 높거나,
         엔진의 최적화 작업에 문제를 일으킬 수 있는 코드에 대해 명시적인 에러를 발생시킨다.
         eslint같은 도구가 비슷한 역할을 해 유사한 효과를 얻을 수 있다.
사용법 : ['use strict']
[주의]
전역에 적용하는 것은 피하자 => 오류발생 
함수단위 적용도 피하자 즉, 즉시 실행 함수로 감싼 스크립트 단위로 적용하는 것이 올바르다
암묵적 전역에 쓰이면 오류난다
변수, 함수, 매개변수를 삭제도하고 엄격모드도 하면 에러난다

21장 빌트인 객체
래퍼객체 = 문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체
ex => const str='hello'
console.log(str.length) // 5  
 이처럼 원시타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작하는 것 
 
eval : 이 함수는 자바스크립트 코드를 나타내는 문자열을 인수로 전달받는다. 
      eval('1+2;') // 3   eval('var x=5;') // undefined=> 함수안ㅇ ㅔ있거나 그럼 계산되긴함
      eval 함수는 기존의 스코프를 런타임에 동적으로 수정한다, 잘 사용하지 x

isNaN : 전달받은 인수가 NaN인지 검사하여 그 결과를 불리언 타입으로 반환한다. 
        isNaN(10) //f  isNaN(NaN) // T

parseFloat : 전달받은 문자열 인수를 부동 소수점 숫자, 즉 실수(소수점 이하의 부분이 있는 수)로 
             해석하여 반환한다 // parseFloat('34 45 66')=> 34, parseFloat('3.14') => 3.14
parseInt : 전달받은 문자열 인수를 정수(소수점 이하의 부분이 없는 수)로 해석하여 반환한다. // parseInt('10.234') => 10


22장 this
this : 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수 (지를 가르키는) 
      이를 통해 프로퍼티나 메서드를 참조할 수 있다.
      this가 가르키는 값, 즉 this 바인딩(식별자와 값을 연결하는 과정)은 함수 호출 방식에 의해 동적으로 결정

호출방식
1. 일반함수 호출
  - 모든 함수 내부의 this에는 '전역 객체'로 바인딩된다. 
2. 메서드 호출
  - 메서드 이름 앞에 마침표(.) 연산자 앞에 바인딩된다.
3. 생성자 함수 호출
  - 생성자 함수가 (미래에?) 생성할 인스턴스가 바인딩된다.
4. Function.prototype.apply,call,bind 메서드에 의한 간접 호출
  - 이 메서드는 모든 함수가 상속받아 사용할 수 있다.
  - 이 메서드는 this로 사용할 객체와 인수 리스트를 인수로 전달받아 함수를 호출
  - apply,call 메서드의 기능은 함수를 호출하는 것, 함수를 호출하면서 첫번째 인수로
    전달된 특정 객체를 호출한 함수의 this에 바인딩한다.


23장 실행컨텍스트
소스코드 타입 => 실행가능한 코드 
1. 전역코드 
  전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생생해야한다. 
  전역 변수와 함수 선언문으로 정의된 전역함수를 객체의 프로퍼티와 메서드로 바인딩하고 참조하기위해 
  전역객체와 연결해야한다 이로 위해 전역코드가 평가되면 전역실행컨텍스트가 생성
2. 함수코드
  지역 스코프를 생성하고 지역변수, 매개변수,argumenst 객체를 관리해야한다.
  지역스코프를 전역스코프에서 시작하는 스코프체인의 일원으로 연결해야한다
이를 위해 함수코드가 평가되면 함수 실행 컨텍스트가 생성
3. eval코드
  스트릿모드에서 자신만의 독자적인 스코프를 생성한다.
  이를 위해 eval코드가 평가되면 eval실행 컨텍스트가 생성
4. 모듈코드 
  모듈별로 독립적인 모듈스코프를 생성한다. 이를 위해 모듈 실행컨텍스트가 생성된다

소스코드 평과와 실행
자바스크립트 엔진은 소스코드를 2개의 과정, 즉 '소스코드 평과'와 '소스코드 실행'과정으로 나누어 처리한다
'소스코드 평과' 과정이 끝나면 선언문을 제외한 소스코드가 순차적으로 실행된다 => 런타임

'소스코드 평과' 과정에서 나온 평가 결과를 실행컨텍스트에게 전달
'실행 컨텍스트' 가 실행에 필요한 정보를 '소스코드 실행' 전달 
'소스코드 실행' 과정에서 실행 결과를 '실행 컨텍스트에게' 전달?

실행컨텍스트의 역할 (평가와 실행의 역할)
1. 전역코드 
평가 
  전역코드 평가과정을 거치며 코드를 실행하기 위한 준비를 한다.
  평가 과정 중에서는 선언문만 먼저 실행한다. 
  => 전역코드의 변수 선언문과 함수 선언문이 먼저 실행되고 
  => 실행결과를 전역변수와 전역함수가 실행 컨텍스트에 전역스코프로 등록된다
  => 이때 전역 변수와 함수 선언문으로 정의된 전역함수는 전역 객체의 프로퍼티와 메서드가 된다
실행  
  평가 과정이 끝나면 런타임이 시작 되어 전역 코드가 순차적으로 실행된다.
  => 변역변수의 값이 할당되고 함수가 호출된다.
  => 함수 호출 시 순차적으로 실행되던 전역코드의 실행이 일지중단하고 코드실행 순서를 변경하여 함수내부로 진입한다.

2. 함수코드
평가 
 함수 호출에 의해 코드실행 순서가 변경되어 함수 내부로 진입하면 함수 내부의 문들을 실행하기 앞서 함수코드 과정을 거치며
 함수코드를 싱행하기위한 준비를 한다
 => 매개변수와 지역 변수 선언문이 먼저 실행되고
 => 그 결과 생성된 매개변수와 지역변수가 실행 컨텍스트가 관리하는 지역스코프에 등록된다
 => 함수 내부에서 지역변수처럼 사용할 수 있는 argumenst객체가 생성되어 지역 스코프에 등록 -> this 바인딩도 결졍된다

실행
 평과 과정이 끝나면 런타임이 시작되어 함수코드가 순차적으로 실행된다.
 => 매개 변수와 지역 변수에 값이 할당되고 console.log 메서드가 호출된다
 => console.log 메서드를 호출하기 위해 먼저 식별자인 console을 스코프 체인을 통해 검색한다
 => 이를 위해 함수코드의 지역스코프는 상위 스코프인 전역스코프와 연결되어야 한다.
 => 코드 실행되려면 스코프를 구분하여 식별자와 바인딩된 값이 관리되어야 한다

 이처럼 코드ㅡ가 실행되려면 스코프, 실별자, 코드실행 순서등의 관리가 필요한데
 1. 선언에 의해 생성된 모든 식별자를 지속적으로 관리할 수 있어야한다~
 2. 스코프는 중첩객체에 의해 스코프 체인을 형성해야한다. 즉, 스코프 체인을 통해 상위 슾포크로 이동하여
    식별자를 검색할 수 있어야 한다.
 3. 현재 실행중인 코드의 실행 순서를 변경할 수 있어야 하며 다시 되돌아갈 수도 있어야한다

 이 모든 것을 관리하는 것이 실행 컨텍스트의 역할이다 

 .... 다시 읽어보자 

 24장 클로저
- 함수가 선언된 렉시컬 환경과의 조합
- 외부 함수보다 중첩 함수가 더 오래 유지되는 경우 중첩 함수는 이미 생명 주기가 종료한 
외부 함수의 변수를 참조할 수 있다 => 클로저 

클로저의 활용
상태를 은닉하고 특정함수에게만 상태 변경을 허용하기 위해 사용!
makeCounter: 보조함수를 인자로 전달 받고 함수를 반환하는 고차함수
             makeCounter를 호출해 함수를 반환할 때 반한된 함수는 자신만의 독립된 렉시컬 환경을 갖는다

캡슐화와 정보은닉
캡슐화 : 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 동작을 하나로 묶는 것
      => 객체의 특정 프로퍼티나 메서트를 감출 목적으로 사용 = 정보은닉


25장 클래스 
- 클래스는 new 연산자 없이 호출하면 에러가 생긴다. 하지만 생성자 함수를 new 연산자 없이 호출하면 일반함수로 호출된다
- 클래스는 상속을 지원하는 extends와 super 키워드를 제공하지만 생성자 함수는 지원하지 않는다 
- 클래스는 호이스팅이 발생하지 않는 것처럼 동작하지만, 함수 선언문으로 정의된 생성자 함수는 호이스팅이
  함수 표현식으로 정의한 생성자 함수는 호이스팅이 발생한다
- 클래스 내의 모든 코드에는 암묵적으로 스트릿모드가 지정되어 실행되며 해제할 수 없다. 생성자 함수는 스트릿모드가 지정되지 않는다
- 클래스의 constructor, 프로토타입 메서드, 정적 메서드는 모두 프로퍼티 어트리뷰트의 값이 false다, 즉 열거 되지 않는다

클래스의 정의
클래스 선언문 : class person{}
익명 클래스 선언문 : const person = class {}
기명 클래스 선언문 : const person = class myClass {}

클래스는 함수이며 클래스가 값으로 사용할 수 있는 일급객체이다. 
일급객체로서 다음과 같은 윽징을 갖는다
- 무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성이 가능하다.
- 변수나 자료구조(객체,배열)에 저장할 수 있다.
- 함수의 매게변수에 전달할 수 있다.
- 함수의 반환값으로 사용할 수 있다.

클래스 호이스팅 
틀래스는 함수로 평가되며, 클래스는 클래스 정의 이전에 참조할 수 없다
클래스 선언문도 변수서언, 함수 정의와 마찬가지로 호이스티이 발생한다.

인스턴스 생성
클래스는 생성자 함수이며, new 연산자와 함께 호출되어 인스턴스를 생성

메서드
클래스 몸체에서는 0개이상의 메서드만 선언할 수 있다.
클래서 몸체에서 정의할 수 있는 메서드는 생성자,프로토타입,정석 메서드 세가지가 있다.
constructor는 생성자 함수와 유사하지만 몇가지 차이가 있다.
constructor는 클래스 내의 최대 한개만 존재할 수 있다. 만일 클래스가 2개이상의 포함하면 문법에러가 발생
  
  프로토타입 메서드
  클래스의 prototype 프로퍼티에 메서드를 추가하지 않아도 기본적으로 프로토타입 메서드가 된다.
  정적 메서드 
  클래스에서는 메서드에 static 키워드를 붙이며 정적 메서드가 된다.

  차이!
  정적 메서드와 프로토타입 메서드는 자신이 속해있는 프로토타입 체인이 다르다
  정적 메서드는 클래스로 호출하고 프로토타입 메서드는 인스턴스로 호출한다
  정적 메서드는 인스턴스 프로퍼티를 참조할 수 없지만 프로토타입 메서드는 인스턴스 프로퍼티를 참조할 수 있다

클래스의 인스턴스 생성 과정
1. 인스턴스 생성과 this 바인딩
new 연산자와 함께 클래스를 호출 -> 암묵적으로 빈 객체가 생성된다
이 빈 객체가 바로 클래스가 생성한 인스턴스다
이때 클래스가 생성한 인스턴스의 프로토타입으로 클래스의 prototype 프러퍼티가 가리키는 객체가 설정
그리고 암묵적으로 생선된 빈객체, 즉 인스턴스는 this에 바인딩된다.

2. 인스턴스 초기화
constructor의 내부 코드가 실행되어 this에 바인딩되어 있는 인스턴스를 초기화한다 
만약 constructor가 생략되었다면 이과정도 생략된다.

3. 인스턴스 반환
클래스의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.

프로퍼티
인스턴스 프로퍼티
- 인스턴스 프로퍼티는 constructor 내부에서 정의해야한다
접근자 프로퍼티
- 접근자 프로퍼티는 자체적으로는 값을 갖지 않고 다르 데이터 프로퍼티의 값을 읽거나 저장할 때 
  사용하는접근자 함수로 구성된 프로퍼티
- 접근자 프로퍼티는 자체적으로 값을 갖지 않고, getter,setter 함수로 구성되어있다

private 필드 정의 제안
자바스크립트는 갭슐화를 완전하게 지원하지 않는다. 즉, 언제나 public이다
public 필드는 어이서든 참조할 수 있지만 private 필드는 클래스 내부에서만 참조할 수 있다
private 필드는 반드시 클래스 몸체에 정의해야 하다 

상속에 의한 클래스 확장
클래스 상속과 생성자 함수 상속
- 상속에 의한 클래스 확장은 기존 클래스를 상속받아 새로운 클래스를 확장하여 정의
- 클래스는 상속을 통해 다른 클래스를 확장할 수 있는 문법인 extends 키워드가 기본적으로 제공

  extends 키워드 : 수퍼클래스와 서브클래스 간의 상속관계를 설정
  super 키워드 : 함수처럼 호출가능하며 this와 같이 식별자처럼 참조할 수 있다
  - super를 호출하면 수퍼클래스의 constructor를 호출한다.
  - super를 호출하면 수퍼클래스의 메서드를 호출한다.

  서브클래스의 super 호출
  서브 클래스는 자신이 직접 인스턴스를 생성하지 않고 수퍼클래스에게 인스턴스를 생성을 위임한다.
  => 이게바로 서브클래서의 constructor에서 반드시 super를 호출해야하는 이유

26 ES6 함수의 추가기능
함수의 구분
이전의 모든 함수는 일반함수로서 호출할 수 있는 것은 물론 생성자 함수로서 호출할 수 있다
일반 함수는 constructor이지만 ES6의 메서드와 화살표 함수는 non-constructor이다 

메서드 
ES6 사양에서 메서드는 메서드 축약 표현으로 정의된 함수만을 의미한다
ES6 메서드는 인스턴스를 생성할 수 없으므로 prototype 프로퍼티가 없고 프로토타입도 생성하지 않는다
ES6 메서드는 자신을 바인딩한 객체를 가리키는 내부 슬롯[[HomeObject]]를 갖는다
ES6 메서드가 아닌 함수는 super 키워드를 사용할 수 없다

화살표 함수
'=>' 정의 문법은 다음과 같다
  함수정의 : const juju = (x, y) => X * y  juju(2,3) //6

  매개변수 선언 
  매개변수가 여러 개인 경우 소괄호 () 안에 선언한다
  - const arrow = (x, y) => { ... }
  매개변수가 한 개인 경우 소괄호 ()를 생략 가능
  - const arrow = x => { ... }
  매개변수가 없는 경우 소괄호 ()를 생략 할 수 없다 => 빈괄호로 둬라
  - const arrow = () => { ... }

  함수 몸체 정의 
  함수 몸체가 하나의 문으로 구정된다면 {} 중괄호 생략할 수 있다
  [기존]
  const power - x => { return x **2 }
  [생략가능할 때]
  const power - x => x **2
  power(2) //4 
  
  화살표 함수와 일반 함수의 차이
  화살표 함수는 인스턴스를 생성할 수 없는 non-constructor이다 
  중복된 매개변수 이름을 선언할 수 없다
  화살표 함수는 함수 자체의 this, argumenst, super, new.target 바인딩을 갖지 않는다
  화살표 함수는 함수 자체의 this 바인딩을 갖지 않는다 따라서 화살표 함수 내부에서 this를 참조하면 
  상위 스코프의 this를 그대로 참조 한다 => lexical this 

Rest 파라미터 : 나머지 매개변수 
Rest 파라미터는 매개변수 이름 앞에 세개의 점 ...을 붙여서 정의한다 
Rest 파라미터는 함수에 전달된 인수들의 목록을 '배열로' 전달 받는다 
Rest 파라미터는 반드시 마지막 파라미터이어야한다! // 항상 맨뒤에잇다
Rest 파라미터 단 하나만 선언할 수 있다

Rest 파라미터와 argumenst 객체
argumenst 객체는 함수 호출 시 전달된 인수들의 정보를 담고있는 순회가능한 '유사 배열 객체' 이며,
함수 내부에서 지역변수처럼 사용할 수 있다
하지만 argumenst 객체는 배열이 아닌 유사배열객체이므로 배열 메서드를 사용하려면 Function prototype.call이나
Function.prototype.apply 메서드를 사용해 argumenst 객체를 배열로 변환해야하는 번거로움이 있다
ES6 부터는 그럼 번거로움이 사라졌다

매개변수의 기본값
인수가 전달되지 않은 매개변수의 값은 undefined 이다.
즉, 매개변수에 인수가 전달되었는지 확인하여 인수가 전달되지 않은 경우 매개변수에 기본값을 할당할 필요가 있다
=> 다시말해, 방어코드가 필요하다!
ex) function sum(x= 0, y=0){
  return x + y 
}
console.log(sum(1)) // 1  NaN이 나오지 않는다 

27장 배열 

요소 : 배열이 가지고 있는 값
인덱스 : 배열의 요소가 배열에서 자신의 위치를 나타내는 정수, 0부터 시작되어
length : 배열의 길이 [1,2,3] //3

자바스크립트 배열은 배열이 아니다 
=> 자바스크립트의 배열은 일반적인 배열의 동작을 흉내 낸 특수한 객체
밀집배열 : 배열의 요소는 데이터 타입으로 통일되어 있으며 서로 연속적으로 인접해 있는 것 , 효율적이며 고속으로 동작한다
희소배열 : 배열의 요소를 위한 메모리 공간은 동일한 크리를 갖지 않아도 되며, 연속적으로 이어져있지 않은 배열

자바스크립트 배열과 일반적인 배열의 차이
인덱스로 배열 요소에 접근하는 경우 일반적인 배열보다 느리다 하지만 요소를 삽입,삭제가 빠르다

length 프로퍼티와 희소배열
- length 프로퍼티의 값은 배열에 (메서드로)요소를 추가,삭제하면 자동 갱신된다
- 현재 length 프로퍼티 값보다 작은 숫자 값을 할당하면 할당한 배열의 길이만큼만 나온다
- 반대로  length 프로퍼티 값보다 큰 숫자 값을 할당하면 배열의 값은 변경됮만 실제로 배열의 길이는 그대로
- 희소배열의 length는 희소배열의 실제 요소 개수보다 언제나 크다

배열 생성
1. 배열 리터럴
  - 가장 일반적인 방법이며, 프로터피 키가 없고 값만 존재
  - 0개 이상의 요소를 쉼표로 구분하여 대괄호로 묶는다 // [1,2,3]
  - 배열 리터럴에 요소를 하나도 추가하지 않으면 배열의 길이는 0 
  - 요소를 생략하면 희소배열이 생성된다 
       arr = [1, ,3] => arr : [1,empty,3] , arr[1] : undefined

2. Array 생성자 함수
  - Object 생성자 함수를 통해 객체를 생성, 전달한 인수에 따라 다르게 동작하므로 주의가 필요

  - 전달된 인수가 1개이고 숫자인 경우 length 프로퍼티 값이 인수인 배열을 생성
       const arr = new Array(10)
       console.log(arr) //[empty * 10]
       console.log(arr.length) // 10

  - 전달된 인수가 없는 경우 빈 배열을 생성 즉, 리터럴(1번의)[] 과 같다
       new Array() // []

  - 전달된 인수가 2개 이상이거나 숫자가 아닌경우 인수를 요소로 갖는 배열을 생성 
       new Array(1,2,3) // [1,2,3]
       new Array({}) // [{}]
  
  - Array 생성자 함수는 new 연산자 없이 즉, 일반 함수로서 호출해도 배열을 생성하는 생성자 함수도 동작

3. Array.of
  - 전달된 인수를 요소로 갖는 배열이다
  - Array 생성자 함수와 다르게 전달된 인수가 1개이고 숫자여도 인수를 요소로 갖는 배열을 생성
       Array.of(1) // [1]
       Array.of('string') // ['string']

4. Array.from
  - 유사 배열 객체 또는 이터러블 객체를 인수로 전달받아 배열로 반환
       Array.from({length:2 , 0:'a',1:'b'}) // [a,b]
       Array.from('hello') // ['h','e','l','l','o']
    
  - 이 메서드를 사용하면 두번째 인수로 전달한 콜백함수로 값을 만들면서 요소를 채울 수 있다
         Array.from({length:3}) // [undefined,undefined,undefined]
         Array.from({length:3},(_, i )=> i ) // [0,1,2]

배열 요소의 추가, 갱신, 삭제
- 추가, 갱신
배열에도 요소를 동적으로 추가할 수 있다. 새로운 인덱스를 사용해 값을 할당하면 추가가 된다
이때, length 프로퍼티 값은 자동 갱신된다
         const arr = [0]
         arr[1] = 1
         console.log(arr) //[0,1]
         console.log(arr.length) //2
- 삭제
특정 요소를 삭제하기 위해 delete 연산자를 사용 할 수 있다
연산자를 이용해 삭제를 하더라도 length 프로퍼티에 영향을 주지는 않는다, 즉 희소배열이 된다
         const arr = [1,2,3]
         delete.arr[1];
         console.log(arr) //[1,empty,3]
         console.log(arr.length) //3 length에 영향을 주지 않는다

배열 메서드 
Array.isArray : 전달된 인수가 배열인지 아닌지 , true//false 로 반환
         Array.isArray() // T
         Array.isArray(new Array()) // T
         Array.isArray(false) // F
         Array.isArray({0:1,length:1}) // F

.reduce 중복 횟수 구하기
const fruits = ['banana','apple','orange','orange','apple']
const count = fruits.reduce((acc,cur)=> {
  acc[cur] = (acc[cur] || 0) +1
  return acc
},{})
console.log(count) // {banana:1 , apple:2, orange:2}

.reduce 중복 요소 제거
const values = [1,2,1,3,5,4,5,3,4,4]
const result = values.reduce((unique,val,i,_values) => _values.indexOf(val) === i ? [...unique,val] : unique, []);
console.log(result) //[1,2,3,5,4]
+ 사실 reduce보다 filter가 더 적절하다
  [filter]
const result = values.filter((val,i,_values) => _values.indexOf(val) === i);
  [Set]
const result = [...new Set(values)]

28장 Number
- Number 생성자 함수는 원시 타입인 숫자를 다룰 때 유용한 프로퍼티와 메서드를 제공
- new 연산자와 함께 호출하여 인스턴스를 생성
 ex) const numObj = new Number()
     console.log(numObj) // Number{[[PrimitiveValue]] : 0}
     Number 생성자 함수의 인수로 숫자를 전달하면서 new 연산자와 함께 호출하면 
     [[NumberData]] 내부슬롯에 인수로 전달받은 숫자를 할당한 Number 래퍼 객체를 생성한다

     인수로 숫자가 아닌 값을 전달받으면 인수를 강제로 숫자로 변환한다 
     const numObj = new Number(10)
     console.log(numObj) // Number{[[PrimitiveValue]] : 10}
     const numObj = new Number('10')
     console.log(numObj) // Number{[[PrimitiveValue]] : 10}
     const numObj = new Number('hello')
     console.log(numObj) // Number{[[PrimitiveValue]] : NaN}

Number의 프로퍼티  
Number.isFinite : 인수로 전달된 숫자값이 유한수이면 true, 무한수이면 false
Number.isInteger : 인수로 전달된 숫자값이 정수이면 true, 아니면 false
Number.isSafeInteger : 인수로 전달된 숫자값이 안전한 정수이면 true, 아니면 false
                      => 100000000000000 // t 
                         100000000000001 // f 
Number.NaN : 인수로 전달된 숫자값이 NaN인지 판별하여 t/f 로 반환 
Number.toFixed : 숫자를 반올림하여 문자열로 반환
                => 12345.6789.toFixed(2) // 12345.68 소수점 이하 2자릿수 유효 나머지 반올림
Number.toString : 숫자를 문자열로 변환하여 반환한다
                => (16).toString(8) //20 8진수 문자열을 반환

29장 Math
Math.abs : 인수로 전달된 숫자의 절대값을 반환. 절대값은 반드시 0 또는 양수여야 함
Math.round : 인수로 전달된 숫자의 소수점 이하를 '반올림'한 정수를 반환
          => Math.round(-1.4) // -1
          => Math.round(1.6) // 2
Math.ceil : 인수로 전달된 숫자의 소수점 이하를 '올림'한 정수를 반환
          => Math.ceil(-1.4) // -1
          => Math.ceil(-1.6) // -1
          => Math.ceil(1.4) // 2
          => Math.ceil(1.6) // 2
Math.floor : 인수로 전달된 숫자의 소수점 이하를 '내림'한 정수를 반환 => Math.ceil의 반대
          => Math.floor(1.9) // 1
          => Math.floor(9.1) // 9
          => Math.floor(-1.9) // -2 소수점 이하를 내림하면 더 작은 정수가 된다
          => Math.floor(-9.1) // -10
Math.sqrt : 인수로 전달된 숫자의 '제곱근' 반환
Math.pow : 첫번째 인수를 밑으로, 두번째 인수를 지수로  거듭제곱한 결과를 반환
          => Math.pow(2, 8) // 256
Math.max : 전달받은 인수중에서 가장 큰수를 반환한다. 인수가 전달되지 않으면 -Infinity 반환
          => Math.max(1,2,4) // 4
Math.min : 전달받은 인수중에서 가장 작은수를 반환한다. 인수가 전달되지 않으면 Infinity 반환
          => Math.max(1,2,4) // 4

30장 Date
- Date 생성자 함수다.
- 내부적으로 날짜와 시간을 나타내는 정수값을 갖는다
new Date() : 인수없이 new 연산자와 호출하면 날짜와 시간을 가지는 Date '객체'를 반환 
          // Mon Jul 06 2024 21:35:18 GMT+0900 (대한민국 표준시)
Date() : 객체를 반환하지않고 날짜와 시간을 가지는 '문자열'로 반환
          //" Mon Jul 06 2024 21:35:18 GMT+0900 (대한민국 표준시)"
new Date(milliseconds) : 숫자 타입의 밀리초를 인수로 전달하면 1970년1월1일 00:00:00(UTC) 기점으로 
                         전달된 밀리초만금 경과한 시간을 객체로 반환
      // new Date(864000) => Fri Jan 02 1970 09:00:00 GMT+0900 (864000은 하루 즉, 1day이다)

Date.Now : 1970년1월1일 00:00:00(UTC) 기점으로 현재시간까지 경과한 밀리초를 숫자로 반환
         => const now = Date.Now() // 1593971539112
            new Date(now) // Mon Jul 06 2024 21:35:18 GMT+0900 (대한민국 표준시)
Date.parse : 1970년1월1일 00:00:00(UTC) 기점으로 인수로 전달된 지정 시간까지의 밀리초를 숫자로 반환
         => Date.parse('Jan 2, 1970 00:00:00 UTC') // 86400000
[월]
Date.getFullYear : Date의 연도를 나타내는 정수를 '반환'
         => new Date('2024/07/22').getFullYear() // 2024
Date.setFullYear : Date의 연도를 나타내는 정수를 '설정'
         => const today = new Date()
         => today.setFullYear(2000)
         => today.getFullYear() //2000
[달]
Date.getMonth : Date의 월을 나타내는 0~11의 정수를 '반환', 1월은 0, 11 은 12월
         => new Date('2024/07/22').getMonth() // 6
         => today.setFullYear(2000)
         => today.getFullYear() //2000
Date.setMonth : Date의 월을 나타내는 0~11의 정수를 '설정', 1월은 0, 11 은 12월
         => const today = new Date()
         => today.setMonth(0) //1월
         => today.getMonth() //0
[날짜]
Date.getDate : Date의 날짜를 나타내는 1~31의 정수를 '반환'
         => new Date('2024/07/22').getDate() // 22
Date.setDate : Date의 날짜를 나타내는 1~31의 정수를  '설정'
         => const today = new Date()
         => today.setDate(1) 
         => today.getDate() //1
[요일]
Date.getDay : Date의 요일을 나타내는 0~6의 정수를 반환, 0 일요일, 6 토요일
         => new Date('2024/07/22').getDay() // 5 => 금요일 

[시간] 
Date.getHours : Date의 시간을 나타내는 0~23의 정수를 '반환'
         => new Date('2024/07/22/12:00').getHours() // 12
Date.setHours : Date의 시간을 나타내는 0~23의 정수를 '설정' , 옵션으로 분, 초, 밀리초 순으로 설정가능
         => const today = new Date()
         => today.setHours(7) 
         => today.getHours() //7

[분] 
Date.getMinutes : Date의 분을 나타내는 0~59의 정수를 '반환'
         => new Date('2024/07/22/12:30').getMinuts() // 30
Date.setMinutes : Date의 분을 나타내는 0~59의 정수를 '설정', 옵션으로 초, 밀리초 순으로 설정가능
         => const today = new Date()
         => today.setMinutes(50) 
         => today.getMinutes() //50

[초] 
Date.getSeconds : Date의 초을 나타내는 0~59의 정수를 '반환'
         => new Date('2024/07/22/12:30:10').getSeconds() // 10
Date.setSeconds : Date 초을 나타내는 0~59의 정수를 '설정', 옵션으로 밀리초 설정가능
         => const today = new Date()
         => today.setSeconds(50) 
         => today.getSeconds() //50

[밀리초] 
Date.getMilliseconds : Date 밀리초을 나타내는 0~999의 정수를 '반환'
         => new Date('2024/07/22/12:30:10:150').getMilliseconds() // 150
Date.setMilliseconds : Date 초을 나타내는 0~999의 정수를 '설정'
         => const today = new Date()
         => today.setMilliseconds(123) 
         => today.getMilliseconds() // 123

문자열
Date.toDateString : 사람이 읽을 수 있는 문자열로 Date 객체의 날짜를 반환
        => const today = new Date('2020/07/24/12:30')
        => today.toString() // Fri Jul 24 2020 12:30:00 GMT+0900 (대한민국 표준시)
        => today.toDateString() // Fri Jul 24 2020

Date.toTimeString : 사람이 읽을 수 있는 Date 객체의 시간을 문자열로 반환
        => const today = new Date('2020/07/24/12:30')
        => today.toString() // Fri Jul 24 2020 12:30:00 GMT+0900 (대한민국 표준시)
        => today.toTimeString() // 12:30:00 GMT+0900 (대한민국 표준시)

Date.toLocalString : 인수로 전달한 로컬 기준으로 Date 객체의 날짜와 시간을 문자열로 반환
        => const today = new Date('2020/07/24/12:30')
        => today.toString() // Fri Jul 24 2020 12:30:00 GMT+0900 (대한민국 표준시)
        => today.toLocalString() // 2020. 07. 24. 오후 12:30:00
        => today.toLocalString('ko-KR') // 2020. 07. 24. 오후 12:30:00
        => today.toLocalString('en-US') // 7/24/2020, 12:30:00 PM

Date.toLocalTimeString : 인수로 전달한 로컬 기준으로 Date 객체의 시간을 문자열로 반환
        => const today = new Date('2020/07/24/12:30')
        => today.toString() // Fri Jul 24 2020 12:30:00 GMT+0900 (대한민국 표준시)
        => today.toLocalTimeString() // 오후 12:30:00
        => today.toLocalTimeString('ko-KR') // 오후 12:30:00
        => today.toLocalTimeString('en-US') // 12:30:00 PM

31장 RegExp 정규 표현식
- 정규 표현식 : 일정한 패턴을 가진 문자열의 집합을 표현하기위해 사용하는 형식언어
32장 
33장 
34장 
35장 
강아지 수술때문에... 진행 늦음 ㅠㅠ...
